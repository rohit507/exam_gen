import logging
import coloredlogs
from collections import namedtuple
import collections.abc as abc
import attr
import attr.validators as valid
import attr.converters as convert
from copy import *
from exam_gen.util.attrs_wrapper import attrs

log = logging.getLogger(__name__)
field_styles = coloredlogs.DEFAULT_FIELD_STYLES
field_styles.update({ 'levelname': {'bold': True, 'color':'yellow'}})
coloredlogs.install(
    level='DEBUG',
    logger=log,
    fmt='%(levelname)s@%(name)s:%(lineno)s:\n%(message)s\n',
    field_styles = field_styles
)

# __all__ = []

@attrs()
class TaggedDict(abc.MutableMapping):

    tag = attr.ib(
        validator=valid.instance_of(str),
    )

    mapping = attr.ib(
        factory=dict,
        converter=convert.default_if_none(factory=dict),
    )

    def __init__(self,tag, *vargs,data=None, **kwargs):
        data = deepcopy(data) if data != None else dict()
        for _map in vargs:
            data.update(_map)
        if 'mapping' in kwargs:
            data.update(kwargs['mapping'])
            kwargs.pop('mapping',None)
        data.update(kwargs)
        self.__attrs_init__(tag,mapping=data)

    def __getitem__(self, key):
        return self.mapping[key]

    def __delitem__(self, key):
        del self.mapping[key]

    def __setitem__(self, key, value):
        self.mapping[key] = value

    def __iter__(self):
        return iter(self.mapping)

    def __len__(self):
        return len(self.mapping)



class Representable():
    # __to_rep_dict__: Overloaded by child, will call super and edit resulting
    #              tagged dict to do stuff.

    # __from_rep_dict__: Overloaded by child, will be passed `__new__` object and
    #                should generate

    # to_rep_dict : generated by representable

    # from_rep_dict : generated by representable

    # to_yaml: generated by representable, will create a flat yaml string

    # from_yaml: generated by representable, will turn a flat yaml dict into
    #            a new object

    # to_yaml_file: generated by representable, will write a file out (w/
    #               appropriate subfiles) to the filesystem

    # from_yaml_file: generated by representable, will read a file from the
    #                 file system while following includes as needed

    # init_subclass: will initialize the class, including assigning a tag if
    #                none is provided.
    pass
